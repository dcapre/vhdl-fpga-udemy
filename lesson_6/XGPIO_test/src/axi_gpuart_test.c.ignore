#include <stdio.h>
#include "platform.h"
#include "xil_printf.h"

#include "xparameters.h" // Includes the parameters (Addresses, IDs, etc.) from the VIVADO build. 
#include "xil_printf.h"  // Allows us to print and requires less space than standard output "stdio".
#include "xgpio.h"       // Gives access to the AXI GPIO drivers
#include "xil_types.h"   // C data types (u32, etc.)
 
// Get device IDs from xparameters.h
#define BTN_ID XPAR_AXI_GPIO_BTNS_BASEADDR // Changed for Vitis 2023.2 edition
#define LED_ID XPAR_AXI_GPIO_LEDS_BASEADDR
#define BTN_CHANNEL 1
#define LED_CHANNEL 1
#define BTN_MASK 0b1111
#define LED_MASK 0b1111
 
int main() {

	XGpio_Config *cfg_ptr;
	XGpio led_device, btn_device;
	u32 data;

    init_platform();
	xil_printf("Entered function main\r\n");

    // Set the base address for all GPIO 0 devices
    // XGpio_Initialize(&led_device, XPAR_XGPIO_0_BASEADDR);
 
	// Initialize LED Device
	cfg_ptr = XGpio_LookupConfig(LED_ID);
	XGpio_CfgInitialize(&led_device, cfg_ptr, cfg_ptr->BaseAddress);
 
	// Initialize Button Device
	cfg_ptr = XGpio_LookupConfig(BTN_ID);
	XGpio_CfgInitialize(&btn_device, cfg_ptr, cfg_ptr->BaseAddress);
 
	// Set Button Tristate
	XGpio_SetDataDirection(&btn_device, BTN_CHANNEL, BTN_MASK);
 
	// Set Led Tristate
	XGpio_SetDataDirection(&led_device, LED_CHANNEL, 0);
 
	while (1) {
		data = XGpio_DiscreteRead(&btn_device, BTN_CHANNEL);
		data &= BTN_MASK;
		if (data != 0) {
			data = LED_MASK;
		} else {
			data = 0;
		}
		XGpio_DiscreteWrite(&led_device, LED_CHANNEL, data);
	}

    return 0;
}